// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  color         String?
  role          Role      @default(STUDENT)
  studentNumber String?
  class         Class?    @relation(fields: [classId], references: [id])
  classId       String?
  posts         Post[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  STUDENT
  TEACHER
}

model Class {
  id   String @id @default(cuid())
  name String
  term String
  user User[]
  Post Post[]

  @@unique([name, term], name: "courseIdentifier")
}

model Post {
  id         String    @id @default(cuid())
  title      String
  background String
  class      Class     @relation(fields: [classId], references: [id])
  tags       String[]
  content    Content[]
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  comments   Comment[]
  classId    String
}

model Content {
  id      String @id @default(cuid())
  order   Int    @default(autoincrement())
  content String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String
}

model Comment {
  id       String @id @default(cuid())
  content  String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  post     Post   @relation(fields: [postId], references: [id])
  postId   String
}
