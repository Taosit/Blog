// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  color         Json?
  role          Role       @default(STUDENT)
  studentNumber String?
  classes       Class[]
  posts         Post[]
  savedPost     SavedPost?
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  STUDENT
  TEACHER
}

enum CoverType {
  IMAGE
  COLOR
}

model Class {
  id        String      @id @default(cuid())
  name      String
  term      String
  users     User[]
  posts     Post[]
  SavedPost SavedPost[]

  @@unique([name, term], name: "courseIdentifier")
}

model Post {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  coverType CoverType @default(COLOR)
  color     Json?
  image     String?
  class     Class     @relation(fields: [classId], references: [id])
  classId   String
  tags      String[]
  content   Json
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
}

model SavedPost {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  title     String?
  coverType CoverType @default(COLOR)
  color     Json?
  image     String?
  class     Class?    @relation(fields: [classId], references: [id])
  classId   String?
  tags      String[]
  content   Json
}

model Comment {
  id       String @id @default(cuid())
  content  Json
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  post     Post   @relation(fields: [postId], references: [id])
  postId   String
}
